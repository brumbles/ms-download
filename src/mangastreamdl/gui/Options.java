/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Options.java
 *
 * Created on 11.9.2010, 16:22:36
 */

package mangastreamdl.gui;

import mangastreamdl.business.Manga;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * @author sirDarts
 */
public class Options extends javax.swing.JFrame
{

    protected enum Action
    {
        OK, CANCEL, APPLY, HELP, DEFAULT
    }

    private Gui     gui;
    private boolean chck;
    private boolean zip;
    private boolean del;
    private String  format;
    private String  dir;
    private Manga tmpm = new Manga("Naruto", "Naruto", "42");

    /**
     * Creates new form Options
     */
    private Options()
    {
        init();
    }

    public Options(Gui gui, boolean chck, boolean zip, boolean del, String format, String dir)
    {
        this.gui = gui;
        this.chck = chck;
        this.zip = zip;
        this.del = del;
        this.format = format;
        this.dir = dir;
        init();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jcb_chck = new javax.swing.JCheckBox();
        jcb_zip = new javax.swing.JCheckBox();
        jcb_del = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jtf_format = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jl_preview = new javax.swing.JLabel();
        jb_OK = new javax.swing.JButton();
        jb_apply = new javax.swing.JButton();
        jb_cancel = new javax.swing.JButton();
        jb_help = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jcb_chck.setText("Check new chapters on startup? (slows down startup)");

        jcb_zip.setText("Zip chapter folders automaticaly?");

        jcb_del.setSelected(true);
        jcb_del.setText("Delete folders after zipping?");
        jcb_del.setEnabled(false);

        jLabel1.setText("Chapter folder format:");

        jLabel2.setText("Preview:");

        jb_OK.setText("OK");

        jb_apply.setText("Apply");
        jb_apply.setActionCommand("APPLY");

        jb_cancel.setText("Cancel");
        jb_cancel.setActionCommand("CANCEL");

        jb_help.setText("Help");
        jb_help.setActionCommand("HELP");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jl_preview, javax.swing.GroupLayout.DEFAULT_SIZE, 587,
                                                Short.MAX_VALUE)
                                        .addComponent(jcb_chck)
                                        .addComponent(jcb_zip)
                                        .addComponent(jcb_del)
                                        .addComponent(jLabel2)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jb_OK, javax.swing.GroupLayout.PREFERRED_SIZE, 72,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(97, 97, 97)
                                                .addComponent(jb_apply, javax.swing.GroupLayout.PREFERRED_SIZE, 76,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        106, Short.MAX_VALUE)
                                                .addComponent(jb_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 74,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(86, 86, 86)
                                                .addComponent(jb_help, javax.swing.GroupLayout.PREFERRED_SIZE, 76,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jtf_format, javax.swing.GroupLayout.DEFAULT_SIZE, 474,
                                                        Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jcb_chck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcb_zip)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcb_del)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jtf_format, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jl_preview, javax.swing.GroupLayout.PREFERRED_SIZE, 18,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jb_OK)
                                        .addComponent(jb_help)
                                        .addComponent(jb_cancel)
                                        .addComponent(jb_apply))
                                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel     jLabel1;
    private javax.swing.JLabel     jLabel2;
    private javax.swing.JButton    jb_OK;
    private javax.swing.JButton    jb_apply;
    private javax.swing.JButton    jb_cancel;
    private javax.swing.JButton    jb_help;
    private javax.swing.JCheckBox  jcb_chck;
    private javax.swing.JCheckBox  jcb_del;
    private javax.swing.JCheckBox  jcb_zip;
    private javax.swing.JLabel     jl_preview;
    private javax.swing.JTextField jtf_format;
    // End of variables declaration//GEN-END:variables

    private void init()
    {
        initComponents();
        jcb_chck.setSelected(chck);
        jcb_zip.setSelected(zip);
        jcb_del.setEnabled(zip);
        jcb_del.setSelected(del);
        jtf_format.setText(format);
        jl_preview.setText(dir + parseFormat(format));
        jtf_format.getDocument().addDocumentListener(new FormatChangeListener());
        jcb_zip.addChangeListener(new ZipChangeListener());

        OptionsButtonListener ol = new OptionsButtonListener(this);
        jb_OK.addActionListener(ol);
        jb_apply.addActionListener(ol);
        jb_cancel.addActionListener(ol);
        jb_help.addActionListener(ol);
    }

    private String parseFormat(String format)
    {
        boolean command = false;
        boolean escape = false;
        boolean dateformat = false;
        StringBuilder ret = new StringBuilder();
        StringBuilder dfs = new StringBuilder();
        Date d = new Date();
        ret.append(File.separator);
        ret.append(tmpm.getDirectory());
        ret.append(File.separator);
        for (int i = 0; i < format.length(); i++)
        {
            char c = format.charAt(i);
            if (command)
            {
                if (c == 'n')
                {
                    ret.append(tmpm.getName());
                }
                else if (c == 'c')
                {
                    ret.append(tmpm.getChapter());
                }
                else if (c == 'd')
                {
                    dateformat = true;
                }
                command = false;
                continue;
            }
            if (escape)
            {
                ret.append(c);
                escape = false;
                continue;
            }
            if (dateformat)
            {
                if (c != '(')
                {
                    dateformat = false;
                    continue;
                }
                i++;
                while (c != ')' && i < format.length() - 1)
                {
                    c = format.charAt(i);
                    dfs.append(c);
                    i++;
                }
                i++;
                try
                {
                    DateFormat df = new SimpleDateFormat(dfs.toString());
                    ret.append(df.format(d));
                }
                catch (IllegalArgumentException ex)
                {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Illegal Argument", JOptionPane.ERROR_MESSAGE);
                }
            }
            else if (c == '%')
            {
                command = true;
            }
            else if (c == '\\')
            {
                escape = true;
            }
            else
            {
                ret.append(c);
            }
        }
        return ret.toString();
    }

    void buttonPressed(Action action)
    {
        switch (action)
        {
            case APPLY:
                gui.setOptions(jcb_chck.isSelected(), jcb_zip.isSelected(), jcb_del.isSelected(),
                        jtf_format.getText());
                break;
            case CANCEL:
                this.dispose();
                break;
            case HELP:
                JOptionPane.showMessageDialog(this, "%n - Name of the manga.\n%c - Chapter number." +
                        "\n%d(dateformat) - current date/time y = year, M = month, d = day, h = hour (12 hours)," +
                        " H = hour (24 hours), m = minute, s = second.\n \\ - escape character.",
                        "Help", JOptionPane.INFORMATION_MESSAGE);
                break;
            case OK:
                gui.setOptions(jcb_chck.isSelected(), jcb_zip.isSelected(), jcb_del.isSelected(),
                        jtf_format.getText());
                this.dispose();
                break;
            default:
                break;
        }
    }

    private class FormatChangeListener implements DocumentListener
    {

        public void insertUpdate(DocumentEvent e)
        {
            jl_preview.setText(dir + parseFormat(jtf_format.getText()));
        }

        public void removeUpdate(DocumentEvent e)
        {
            jl_preview.setText(dir + parseFormat(jtf_format.getText()));
        }

        public void changedUpdate(DocumentEvent e)
        {
            jl_preview.setText(dir + parseFormat(jtf_format.getText()));
        }

    }

    private class ZipChangeListener implements ChangeListener
    {

        public void stateChanged(ChangeEvent e)
        {
            if (jcb_zip.isSelected())
            {
                jcb_del.setEnabled(true);
            }
            else
            {
                jcb_del.setEnabled(false);
            }
        }

    }

}
