/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * gui.java
 *
 * Created on 22.7.2010, 17:50:26
 */

package mangastreamdl.gui;

import mangastreamdl.business.*;
import mangastreamdl.business.ms.MSParser;
import mangastreamdl.persistence.DAO;
import mangastreamdl.persistence.DAOFactory;
import mangastreamdl.persistence.DAOType;
import mangastreamdl.persistence.NoSuchTypeException;
import org.xml.sax.SAXException;
import sun.net.www.protocol.http.HttpURLConnection;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author sirDarts
 */
public class Gui extends JFrame
{

    public enum Action
    {
        ADD, DEL, SET, DL, DLALL, STOP, DEFAULT, VER, ALL, CHAP, OPT, ABOUT, EDIT
    }

    public static final String VERSION = "4.3.3";
    Set<Manga> mangalist;
    File       currentdir;
    Downloader dl;
    File       options;
    boolean chck   = false;
    boolean zip    = false;
    boolean del    = true;
    String  format = "Chapter%c";
    private final static DAOType daotype = DAOType.XML;
    private DAO dao;


    /**
     * Creates new form gui
     */
    public Gui()
    {
        this.mangalist = new TreeSet<>();
        options = new File("options.ini");
        init();
    }

    public Gui(Set<Manga> mangalist, File currentdir)
    {
        this.mangalist = mangalist;
        this.currentdir = currentdir;
        options = new File("options.ini");
        init();
    }

    public Gui(Set<Manga> mangalist)
    {
        this(mangalist, new File("."));
    }

    /**
     * Creates a new GUI from the given save-file.
     *
     * @param f Save file.
     */
    public Gui(File f)
    {
        try
        {
            dao = DAOFactory.getDAO(daotype);
            dao.load(this, f);
            options = f;
            init();
        }
        catch (NoSuchTypeException ex)
        {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents()
        {

            jb_add = new javax.swing.JButton();
            jcb_manga = new javax.swing.JComboBox();
            jb_dir = new javax.swing.JButton();
            JLabel jLabel1 = new JLabel();
            jb_dl = new javax.swing.JButton();
            jl_dling = new javax.swing.JLabel();
            jl_dir = new javax.swing.JLabel();
            jb_del = new javax.swing.JButton();
            jLabel2 = new javax.swing.JLabel();
            jb_stop = new javax.swing.JButton();
            jpb_chap = new javax.swing.JProgressBar();
            jpb_pg = new javax.swing.JProgressBar();
            jb_all = new javax.swing.JButton();
            jb_chap = new javax.swing.JButton();
            jcb_check = new javax.swing.JCheckBox();
            jb_edit = new javax.swing.JButton();
            js_chap = new javax.swing.JSpinner();
            jb_dlall = new javax.swing.JButton();
            jMenuBar1 = new javax.swing.JMenuBar();
            jm_file = new javax.swing.JMenu();
            jmi_add = new javax.swing.JMenuItem();
            jmi_delete = new javax.swing.JMenuItem();
            jmi_edit = new javax.swing.JMenuItem();
            jSeparator1 = new javax.swing.JPopupMenu.Separator();
            jm_exit = new javax.swing.JMenuItem();
            jMenu2 = new javax.swing.JMenu();
            jmi_opt = new javax.swing.JMenuItem();
            jmi_set = new javax.swing.JMenuItem();
            jm_donate = new javax.swing.JMenu();
            jmi_about = new javax.swing.JMenuItem();
            jmi_ver = new javax.swing.JMenuItem();
            jmi_donate = new javax.swing.JMenuItem();

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("Mangastream Downloader");

            jb_add.setText("Add manga");
            jb_add.setActionCommand("ADD");

            jcb_manga.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
            jcb_manga.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    jcb_mangaActionPerformed(evt);
                }
            });

            jb_dir.setText("Set directory");
            jb_dir.setActionCommand("SET");

            jLabel1.setText("Choose manga:");

            jb_dl.setText("Download");
            jb_dl.setActionCommand("DL");
            jb_dl.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    jb_dlActionPerformed(evt);
                }
            });

            jl_dling.setText("Downloading:");

            jl_dir.setText("Current directory:");

            jb_del.setText("Delete manga");
            jb_del.setActionCommand("DEL");

            jLabel2.setText("Chapter:");

            jb_stop.setText("Stop");
            jb_stop.setActionCommand("STOP");

            jpb_chap.setStringPainted(true);

            jpb_pg.setStringPainted(true);

            jb_all.setText("Add all MS manga");
            jb_all.setActionCommand("ALL");

            jb_chap.setText("Check new chapters");
            jb_chap.setActionCommand("CHAP");

            jcb_check.setText("Check new chapters on startup?");
            jcb_check.setActionCommand("CHCK");
            jcb_check.setSelected(chck);

            jb_edit.setText("Edit manga");
            jb_edit.setActionCommand("EDIT");

            js_chap.setModel(new StringSpinnerModel());
            js_chap.setEditor(new StringSpinnerEditor(js_chap));

            jb_dlall.setText("Download All Chapters");
            jb_dlall.setActionCommand("DLALL");
            jb_dlall.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    jb_dlallActionPerformed(evt);
                }
            });

            jm_file.setText("File");

            jmi_add.setAccelerator(
                    javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
            jmi_add.setText("Add manga");
            jmi_add.setActionCommand("ADD");
            jm_file.add(jmi_add);

            jmi_delete.setAccelerator(
                    javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
            jmi_delete.setText("Delete manga");
            jmi_delete.setActionCommand("DEL");
            jm_file.add(jmi_delete);

            jmi_edit.setText("Edit manga");
            jmi_edit.setActionCommand("EDIT");
            jm_file.add(jmi_edit);
            jm_file.add(jSeparator1);

            jm_exit.setText("Exit");
            jm_exit.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    jm_exitActionPerformed(evt);
                }
            });
            jm_file.add(jm_exit);

            jMenuBar1.add(jm_file);

            jMenu2.setText("Edit");

            jmi_opt.setAccelerator(
                    javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
            jmi_opt.setText("Options");
            jmi_opt.setActionCommand("OPT");
            jMenu2.add(jmi_opt);

            jmi_set.setText("Set Directory");
            jmi_set.setActionCommand("SET");
            jMenu2.add(jmi_set);

            jMenuBar1.add(jMenu2);

            jm_donate.setText("Help");

            jmi_about.setText("About");
            jmi_about.setActionCommand("ABOUT");
            jm_donate.add(jmi_about);

            jmi_ver.setText("Check version");
            jmi_ver.setActionCommand("VER");
            jm_donate.add(jmi_ver);

            jmi_donate.setText("Donate");
            jmi_donate.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    jmi_donateActionPerformed(evt);
                }
            });
            jm_donate.add(jmi_donate);

            jMenuBar1.add(jm_donate);

            setJMenuBar(jMenuBar1);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jpb_chap, javax.swing.GroupLayout.Alignment.LEADING,
                                                    javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
                                            .addComponent(jpb_pg, javax.swing.GroupLayout.Alignment.LEADING,
                                                    javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(
                                                            javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(layout.createSequentialGroup()
                                                                    .addComponent(jLabel1)
                                                                    .addGap(10, 10, 10)
                                                                    .addComponent(jcb_manga, 0,
                                                                            javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                            Short.MAX_VALUE)
                                                                    .addGap(18, 18, 18)
                                                                    .addComponent(jLabel2)
                                                                    .addPreferredGap(
                                                                            javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                    .addComponent(js_chap,
                                                                            javax.swing.GroupLayout.PREFERRED_SIZE, 117,
                                                                            javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addGap(71, 71, 71))
                                                            .addGroup(layout.createSequentialGroup()
                                                                    .addComponent(jl_dling)
                                                                    .addPreferredGap(
                                                                            javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                                            javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                            Short.MAX_VALUE)
                                                                    .addComponent(jb_dlall,
                                                                            javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                            javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                            Short.MAX_VALUE)
                                                                    .addPreferredGap(
                                                                            javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                    .addComponent(jb_dl,
                                                                            javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                            javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                            Short.MAX_VALUE))
                                                            .addGroup(layout.createSequentialGroup()
                                                                    .addGroup(layout.createParallelGroup(
                                                                            javax.swing.GroupLayout.Alignment.LEADING)
                                                                            .addComponent(jl_dir,
                                                                                    javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                    489,
                                                                                    javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                            .addComponent(jcb_check))
                                                                    .addGap(0, 0, Short.MAX_VALUE)))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(layout.createParallelGroup(
                                                            javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jb_stop, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                    239, Short.MAX_VALUE)
                                                            .addComponent(jb_chap,
                                                                    javax.swing.GroupLayout.Alignment.TRAILING,
                                                                    javax.swing.GroupLayout.DEFAULT_SIZE, 239,
                                                                    Short.MAX_VALUE)
                                                            .addComponent(jb_dir,
                                                                    javax.swing.GroupLayout.Alignment.TRAILING,
                                                                    javax.swing.GroupLayout.DEFAULT_SIZE, 239,
                                                                    Short.MAX_VALUE)
                                                            .addComponent(jb_del,
                                                                    javax.swing.GroupLayout.Alignment.TRAILING,
                                                                    javax.swing.GroupLayout.DEFAULT_SIZE, 239,
                                                                    Short.MAX_VALUE)
                                                            .addComponent(jb_add,
                                                                    javax.swing.GroupLayout.Alignment.TRAILING,
                                                                    javax.swing.GroupLayout.DEFAULT_SIZE, 239,
                                                                    Short.MAX_VALUE)
                                                            .addComponent(jb_all,
                                                                    javax.swing.GroupLayout.Alignment.TRAILING,
                                                                    javax.swing.GroupLayout.DEFAULT_SIZE, 239,
                                                                    Short.MAX_VALUE)
                                                            .addComponent(jb_edit, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                    239, Short.MAX_VALUE))))
                                    .addContainerGap())
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jcb_manga, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                    javax.swing.GroupLayout.DEFAULT_SIZE,
                                                    javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jb_add)
                                            .addComponent(js_chap, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                    javax.swing.GroupLayout.DEFAULT_SIZE,
                                                    javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jb_del)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jb_edit)
                                    .addGap(7, 7, 7)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jl_dir)
                                            .addComponent(jb_dir))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                    .addGap(4, 4, 4)
                                                    .addComponent(jb_all)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jb_chap))
                                            .addGroup(layout.createSequentialGroup()
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jcb_check)))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jb_stop)
                                            .addComponent(jl_dling)
                                            .addComponent(jb_dl)
                                            .addComponent(jb_dlall))
                                    .addGap(18, 18, 18)
                                    .addComponent(jpb_pg, javax.swing.GroupLayout.PREFERRED_SIZE,
                                            javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jpb_chap, javax.swing.GroupLayout.PREFERRED_SIZE,
                                            javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(14, 14, 14))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jb_dlActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_jb_dlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_dlActionPerformed

    private void jm_exitActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_jm_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jm_exitActionPerformed

    private void jmi_donateActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_jmi_donateActionPerformed
        try
        {
            java.awt.Desktop.getDesktop().browse(new URI("https://sourceforge.net/donate/index.php?group_id=341109"));
        }
        catch (IOException | URISyntaxException ex)
        {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jmi_donateActionPerformed

    private void jb_dlallActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_jb_dlallActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_dlallActionPerformed

    private void jcb_mangaActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_jcb_mangaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcb_mangaActionPerformed

    private javax.swing.JLabel               jLabel2;
    private javax.swing.JMenu                jMenu2;
    private javax.swing.JMenuBar             jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JButton              jb_add;
    private javax.swing.JButton              jb_all;
    private javax.swing.JButton              jb_chap;
    private javax.swing.JButton              jb_del;
    private javax.swing.JButton              jb_dir;
    private javax.swing.JButton              jb_dl;
    private javax.swing.JButton              jb_dlall;
    private javax.swing.JButton              jb_edit;
    private javax.swing.JButton              jb_stop;
    private javax.swing.JCheckBox            jcb_check;
    private javax.swing.JComboBox            jcb_manga;
    private javax.swing.JLabel               jl_dir;
    private javax.swing.JLabel               jl_dling;
    private javax.swing.JMenu                jm_donate;
    private javax.swing.JMenuItem            jm_exit;
    private javax.swing.JMenu                jm_file;
    private javax.swing.JMenuItem            jmi_about;
    private javax.swing.JMenuItem            jmi_add;
    private javax.swing.JMenuItem            jmi_delete;
    private javax.swing.JMenuItem            jmi_donate;
    private javax.swing.JMenuItem            jmi_edit;
    private javax.swing.JMenuItem            jmi_opt;
    private javax.swing.JMenuItem            jmi_set;
    private javax.swing.JMenuItem            jmi_ver;
    private javax.swing.JProgressBar         jpb_chap;
    private javax.swing.JProgressBar         jpb_pg;
    private javax.swing.JSpinner             js_chap;
    // End of variables declaration                   

    /**
     * Initiates the default values of the gui components.
     */
    private void init()
    {
        initComponents();
        Dimension dim = getToolkit().getScreenSize();
        Rectangle rect = getBounds();
        setLocation((dim.width - rect.width) / 2, (dim.height - rect.height) / 2);
        if (currentdir == null)
        {
            currentdir = new File(".");
        }
        jl_dir.setText(jl_dir.getText() + " " + currentdir.getAbsolutePath());
        jcb_manga.setModel(new DefaultComboBoxModel(mangalist.toArray()));
        jcb_manga.addItemListener(new MangaChooserListener(this));
        ActionListener al = new GuiButtonListener(this);
        jb_add.addActionListener(al);
        jb_del.addActionListener(al);
        jb_dir.addActionListener(al);
        jb_dl.addActionListener(al);
        jb_dlall.addActionListener(al);
        jb_stop.addActionListener(al);
        jb_all.addActionListener(al);
        jb_chap.addActionListener(al);
        jb_edit.addActionListener(al);
        jmi_add.addActionListener(al);
        jmi_about.addActionListener(al);
        jmi_delete.addActionListener(al);
        jmi_opt.addActionListener(al);
        jmi_ver.addActionListener(al);
        jmi_set.addActionListener(al);
        jmi_edit.addActionListener(al);
        Object o = jcb_manga.getSelectedItem();
        if (o instanceof Manga)
        {
            Manga manga = (Manga) o;
            js_chap.setValue(manga.getChapter());
        }
        else
        {
            js_chap.setValue("0");
        }
        jcb_check.addChangeListener(new MSChangeListener(this));

        if (isChck())
        {
            List<Pair<Manga, String>> l = new ArrayList<>();
            for (Manga manga : mangalist)
            {
                String last = lastChapter(manga);
                if (last.compareTo(manga.getChapter()) == -1)
                {
                    Pair<Manga, String> p = new Pair<>(manga, last);
                    l.add(p);
                }
            }
            if (l.size() > 0)
            {
                NewChapters nch = new NewChapters(l, this);
                nch.setLocationRelativeTo(this);
                nch.setVisible(true);
                nch.setAlwaysOnTop(true);
            }
        }
    }

    /**
     * Button action resolver.
     *
     * @param action Pressed button.
     */
    @SuppressWarnings("element-type-mismatch")
    public void buttonPressed(Action action)
    {
        switch (action)
        {
            case ADD: //Add Manga
                AddManga add = new AddManga(this);
                add.setLocationRelativeTo(this);
                add.setVisible(true);
                break;
            case SET: // Set Directory
                JFileChooser jfc = new JFileChooser(currentdir);
                jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int ok = jfc.showDialog(this, "OK");
                if (ok == JFileChooser.APPROVE_OPTION)
                {
                    currentdir = jfc.getSelectedFile();
                    jl_dir.setText("Current directory: " + currentdir.getAbsolutePath());
                    jl_dir.repaint();
                    save();
                }
                break;
            case DEL: //Delete Manga
                if (jcb_manga.getSelectedItem() == null)
                {
                    break;
                }
                mangalist.remove(jcb_manga.getSelectedItem());
                jcb_manga.setModel(new DefaultComboBoxModel(mangalist.toArray()));
                jcb_manga.repaint();
                save();
                break;
            case DL: //Download
                download();
                break;
            case DLALL:
                downloadAllChapters();
                break;
            case STOP: //Stop
                if (dl != null)
                {
                    dl.setRunning(false);
                }
                jpb_chap.setValue(0);
                JOptionPane.showMessageDialog(this, "Stopped!", "Stopped.", JOptionPane.INFORMATION_MESSAGE);
                break;
            case VER: //Check version
                if (checkVersion())
                {
                    JOptionPane.showMessageDialog(this, "You have the current version.");
                }
                else
                {
                    JOptionPane.showMessageDialog(this,
                            "You have an old version. Please download a new one from https://sourceforge.net/projects/mangastreamdown/");
                }
                break;
            case ALL: //Add All MS Manga
                int yes = JOptionPane.showConfirmDialog(this, "Are you sure you want to add all MS manga?");
                if (yes == JOptionPane.OK_OPTION)
                {
                    List<Manga> foo = getAllMSManga();
                    for (Manga manga : foo)
                    {
                        if (!mangalist.contains(manga))
                        {
                            mangalist.add(manga);
                        }
                    }
                    jcb_manga.setModel(new DefaultComboBoxModel(mangalist.toArray()));
                    jcb_manga.repaint();
                    save();
                    JOptionPane.showMessageDialog(this, "Done!");
                }
                break;
            case CHAP: //Check new Chapters
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                List<Pair<Manga, String>> l = new ArrayList<>();
                Map<String, Manga> msmanga = new HashMap<>();
                Map<String, Manga> mfmanga = new HashMap<>();
                for (Manga manga : mangalist)
                {
                    switch (manga.getSite())
                    {
                        case MS:
                            msmanga.put(manga.getName(), manga);
                            break;
                        case MF:
                            mfmanga.put(manga.getName(), manga);
                            break;
                    }
                }

                List<Pair<Manga, String>> mschapters = null;
                List<Pair<Manga, String>> mfchapters = null;
                try
                {
                    MangaParser parser = MangaParserFactory.getParser(Sites.MS);
                    mschapters = parser.getLastChapters(msmanga);
                    parser = MangaParserFactory.getParser(Sites.MF);
                    mfchapters = parser.getLastChapters(mfmanga);
                }
                catch (IOException | SAXException | URISyntaxException ex)
                {
                    Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                if (mschapters == null || mfchapters == null)
                {
                    break;
                }
                for (Pair<Manga, String> pair : mschapters)
                {
                    String last = pair.second;
                    Manga manga = findManga(mangalist, pair.first);
                    if (last.equals("-1"))
                    {
                        JOptionPane.showMessageDialog(this, "The manga " + manga.getName() +
                                " was not found. It was probably dropped by mangastream.",
                                "Manga not found.", JOptionPane.ERROR_MESSAGE);
                    }
                    else if (last.compareToIgnoreCase(manga.getChapter()) != 0)
                    {
                        Pair<Manga, String> p = new Pair<>(manga, last);
                        l.add(p);
                    }
                }
                for (Pair<Manga, String> pair : mfchapters)
                {
                    String last = parseChapter(pair.second, Sites.MF);
                    Manga manga = findManga(mangalist, pair.first);
                    if (last.equals("-1"))
                    {
                        JOptionPane.showMessageDialog(this,
                                "The manga " + manga.getName() + " was not found. It was probably dropped by mangafox.",
                                "Manga not found.", JOptionPane.ERROR_MESSAGE);
                    }
                    else if (last.compareToIgnoreCase(manga.getChapter()) != 0)
                    {
                        Pair<Manga, String> p = new Pair<>(manga, last);
                        l.add(p);
                    }
                }
                if (l.size() > 0)
                {
                    NewChapters nch = new NewChapters(l, this);
                    nch.setLocationRelativeTo(this);
                    nch.setVisible(true);
                    nch.setAlwaysOnTop(true);
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "There are no new chapters!");
                }
                break;
            case OPT: //Options
                JFrame opt = new Options(this, chck, zip, del, format, currentdir.getAbsolutePath());
                opt.setLocationRelativeTo(this);
                opt.setVisible(true);
                break;
            case ABOUT: //About
                About ab = new About();
                ab.setLocationRelativeTo(this);
                ab.setVisible(true);
                break;
            case EDIT:
                Manga curr = (Manga) jcb_manga.getSelectedItem();
                if (curr == null)
                {
                    break;
                }
                Edit e = new Edit(curr, this);
                e.setLocationRelativeTo(this);
                e.setVisible(true);
            default:
        }
    }

    /**
     * Adds a given manga to the list.
     *
     * @param manga Manga to be added.
     */
    public void addManga(Manga manga)
    {
        mangalist.add(manga);
        jcb_manga.setModel(new DefaultComboBoxModel(mangalist.toArray()));
        jcb_manga.repaint();
        save();
    }

    /**
     * Start the download.
     */
    private void download()
    {
        String chapter = js_chap.getValue().toString();
        jl_dling.setText("Downloading: Wait!");

        Object o = jcb_manga.getSelectedItem();
        Manga manga;
        if (o instanceof Manga)
        {
            manga = (Manga) o;
        }
        else
        {
            return;
        }

        manga.setChapter(js_chap.getValue().toString());
        save();

        File f = new File(currentdir, parseFormat(manga, chapter));
        if (!f.exists())
        {
            boolean res = f.mkdirs();
            if (!res)
            {
                showError("Creating directory " + f.getAbsolutePath() + " failed.");
            }
        }

        dl = new Downloader(this, manga, chapter, f);
        Thread t = new Thread(dl);
        t.start();
    }

    private void downloadAllChapters()
    {
        jl_dling.setText("Downloading: Wait!");

        Object o = jcb_manga.getSelectedItem();
        Manga manga;
        if (o instanceof Manga)
        {
            manga = (Manga) o;
        }
        else
        {
            return;
        }

        MangaParser MP = MangaParserFactory.getParser(manga.getSite());
        Map<String, String> map;
        try
        {
            map = MP.getAllChapters(manga);

            dl = new Downloader(this, map, currentdir, manga);
            Thread t = new Thread(dl);
            t.start();
        }
        catch (IOException | SAXException | URISyntaxException ex)
        {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Method called by the downloader when a next page is being downloaded.
     *
     * @param page  Name of the page.
     * @param pages Count of all pages in the current download.
     */
    public void nextPage(String page, int pages, Manga manga, String chapter)
    {
        jl_dling.setText("Downloading " + manga.getName() + ": Chapter: " + chapter + " Page: " + page + "/" + pages);
    }

    /**
     * Method called by the downloader, when the download is completed.
     *
     * @throws IOException if the input file was not found
     */
    public void done()
    {
    /*if (zip){
    jl_dling.setText("Downloading: Zipping!");
	int BUFFER = 2048;
	BufferedInputStream origin = null;
	File z = new File(dir.getParent()+File.separator+dir.getName()+".zip");
	FileOutputStream fos = new FileOutputStream(z);
	ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(fos));
	String files[] = dir.list();
	byte data[] = new byte[BUFFER];
	for (int i = 0; i < files.length; i++) {
	FileInputStream fi = new FileInputStream(dir+File.separator+files[i]);
	origin = new BufferedInputStream(fi, BUFFER);
	ZipEntry ze = new ZipEntry(files[i]);
	zos.putNextEntry(ze);
	int count;
	while((count = origin.read(data, 0,  BUFFER)) != -1) {
	zos.write(data, 0, count);
	}
	origin.close();
	fi.close();
	}
	zos.close();
	fos.close();
	}

	if(zip && del){
	String f2[] = dir.list();
	for (int i = 0; i < f2.length; i++) {
	File fd = new File(dir + File.separator + f2[i]);
	System.out.println("Deleting "+fd);
	if (!fd.delete())
	System.out.println("Failed to delete "+fd);
	}
	dir.delete();
	}*/

        jl_dling.setText("Downloading: Complete!");
        JOptionPane.showMessageDialog(this, "Done!", "Done.", JOptionPane.INFORMATION_MESSAGE);
    }

    public File getCurrentdir()
    {
        return currentdir;
    }

    public void setCurrentdir(File currentdir)
    {
        this.currentdir = currentdir;
    }

    public Set<Manga> getMangalist()
    {
        return mangalist;
    }

    public void setMangalist(Set<Manga> mangalist)
    {
        this.mangalist = mangalist;
    }

    /**
     * Method called by the Downloader to set the starting values of the Chapter progress bar.
     *
     * @param pages Number of pages in the current chapter.
     */
    public void setChapProgressBar(int pages)
    {
        jpb_chap.setMaximum(pages);
        jpb_chap.setMinimum(0);
        jpb_chap.setValue(0);
    }

    /**
     * Method called by the Downloader to update the Chapter progress bar with a new value.
     *
     * @param i new value.
     */
    public void updateChapProgressBar(int i)
    {
        jpb_chap.setValue(i);
    }

    /**
     * Mehtod called by the Downloader to set the starting values of the Page progress bar.
     *
     * @param max size of the current page.
     */
    public void setPgProgressBar(int max)
    {
        jpb_pg.setMaximum(max);
        jpb_pg.setMinimum(0);
        jpb_pg.setValue(0);
    }

    public void updatePgProgressBar(float percentageDone)
    {
        int iPercentageDone = Math.round(percentageDone);
        jpb_pg.setValue(iPercentageDone);
    }

    /**
     * Sets the chapter in the chapter text field.
     *
     * @param chapter chapter name
     */
    public void setChapter(String chapter)
    {
        js_chap.setValue(chapter);
    }

    /**
     * Checks if the current version is the newest. (does not work for beta)
     *
     * @return whether or not this version is current
     */
    private boolean checkVersion()
    {
        try
        {
            URI u = new URI("http://www.riskov.cz/version.txt");
            HttpURLConnection huc = new HttpURLConnection(u.toURL(), null);
            InputStream is = huc.getInputStream();
            StringReader sr = new StringReader(VERSION);
            int c = sr.read();
            int b = is.read();
            while (c != -1 && b != -1)
            {
                if (c != b)
                {
                    return c > b;
                }
                c = sr.read();
                b = is.read();
            }
            if (c == -1 && b != -1)
            {
                return false;
            }
        }
        catch (IOException | URISyntaxException ex)
        {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }

    /**
     * Gets the last chapter of the given manga.
     *
     * @param manga The manga.
     * @return the name of the last chapter.
     */
    private String lastChapter(Manga manga)
    {
        try
        {
            MangaParser parser = MangaParserFactory.getParser(manga.getSite());
            String s = parser.getLastChapter(manga.getName());
            if (s == null)
            {
                JOptionPane.showMessageDialog(this,
                        "The manga " + manga.getName() + " was not found. It was probably dropped by " +
                                (manga.getSite() == Sites.MS ? "mangastream." : "mangafox"),
                        "Manga not found.", JOptionPane.ERROR_MESSAGE);
                return "0";
            }
            return parseChapter(s, manga.getSite());
        }
        catch (IOException | SAXException | URISyntaxException ex)
        {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "0";
    }

    /**
     * Parses the first part of the chapter name.
     *
     * @param s    chapter
     * @param site site
     * @return first part of the chapter name
     */
    private String parseChapter(String s, Sites site)
    {
        String[] ss = s.split(" ");
        String ret = "";
        switch (site)
        {
            case MS:
                ret = ss[0];
                break;
            case MF:
                for (int i = 0; i < ss.length - 1; i++)
                {
                    if (ss[i].equalsIgnoreCase("Ch"))
                    {
                        ret = ss[i + 1];
                        while (ret.charAt(0) == '0')
                        {
                            ret = ret.substring(1);
                        }
                        break;
                    }
                }
                break;
        }
        return ret;
    }

    /**
     * Gets all the manga translated by Mangastream.
     *
     * @return a list of all the manga.
     */
    private List<Manga> getAllMSManga()
    {
        List<Manga> ret = new ArrayList<>();
        try
        {
            MangaParser parser = new MSParser();
            List<String> l = parser.getAllManga();
            for (String m : l)
            {
                Manga manga = new Manga(m, m, "0");
                ret.add(manga);
            }
            return ret;
        }
        catch (IOException | SAXException | URISyntaxException ex)
        {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ret;
    }

    public boolean isChck()
    {
        return chck;
    }

    public void setChck(boolean chck)
    {
        this.chck = chck;
    }

    public boolean isDel()
    {
        return del;
    }

    public void setDel(boolean del)
    {
        this.del = del;
    }

    public String getFormat()
    {
        return format;
    }

    public void setFormat(String format)
    {
        if (format.equals(""))
        {
            this.format = "Chapter%c";
        }
        else
        {
            this.format = format;
        }
    }

    public boolean isZip()
    {
        return zip;
    }

    public void setZip(boolean zip)
    {
        this.zip = zip;
    }

    /**
     * Saves the current state of the program.
     */
    public void save()
    {
        try
        {
            dao = DAOFactory.getDAO(daotype);
            dao.save(this, options);
        }
        catch (NoSuchTypeException ex)
        {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Called by the Options Window to set the new options.
     *
     * @param chck   Check new chapters on startup.
     * @param zip    Zip after download.
     * @param del    Delete the source files after zipping.
     * @param format Directory format.
     */
    public void setOptions(boolean chck, boolean zip, boolean del, String format)
    {
        this.chck = chck;
        this.zip = zip;
        this.del = del;
        this.format = format;
        save();
    }

    /**
     * Parses the directory format for the current manga.
     *
     * @param m  the current manga.
     * @param ch Chapter name.
     * @return Parsed name of the directory.
     */
    public String parseFormat(Manga m, String ch)
    {
        boolean command = false;
        boolean escape = false;
        boolean dateformat = false;
        StringBuilder ret = new StringBuilder();
        StringBuilder dfs = new StringBuilder();
        Date d = new Date();
        ret.append(File.separator);
        ret.append(parseDir(m, ch, m.getDirectory()));
        ret.append(File.separator);
        for (int i = 0; i < format.length(); i++)
        {
            char c = format.charAt(i);
            if (command)
            {
                if (c == 'n')
                {
                    ret.append(m.getName());
                }
                else if (c == 'c')
                {
                    ret.append(ch);
                }
                else if (c == 'd')
                {
                    dateformat = true;
                }
                command = false;
                continue;
            }
            if (escape)
            {
                ret.append(c);
                escape = false;
                continue;
            }
            if (dateformat)
            {
                if (c != '(')
                {
                    dateformat = false;
                    continue;
                }
                i++;
                while (c != ')' && i < format.length() - 1)
                {
                    c = format.charAt(i);
                    dfs.append(c);
                    i++;
                }
                i++;
                try
                {
                    DateFormat df = new SimpleDateFormat(dfs.toString());
                    ret.append(df.format(d));
                }
                catch (IllegalArgumentException ex)
                {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Illegal Argument", JOptionPane.ERROR_MESSAGE);
                }
            }
            else if (c == '%')
            {
                command = true;
            }
            else if (c == '\\')
            {
                escape = true;
            }
            else
            {
                ret.append(c);
            }
        }
        return ret.toString();
    }

    /**
     * Parses the directory format for the current manga.
     *
     * @param m      the current manga.
     * @param ch     Chapter name.
     * @param format Directory format.
     * @return Parsed name of the directory.
     */
    private String parseDir(Manga m, String ch, String format)
    {
        boolean command = false;
        boolean escape = false;
        boolean dateformat = false;
        StringBuilder ret = new StringBuilder();
        StringBuilder dfs = new StringBuilder();
        Date d = new Date();
        for (int i = 0; i < format.length(); i++)
        {
            char c = format.charAt(i);
            if (command)
            {
                if (c == 'n')
                {
                    ret.append(m.getName());
                }
                else if (c == 'c')
                {
                    ret.append(ch);
                }
                else if (c == 'd')
                {
                    dateformat = true;
                }
                command = false;
                continue;
            }
            if (escape)
            {
                ret.append(c);
                escape = false;
                continue;
            }
            if (dateformat)
            {
                if (c != '(')
                {
                    dateformat = false;
                    continue;
                }
                i++;
                while (c != ')' && i < format.length() - 1)
                {
                    c = format.charAt(i);
                    dfs.append(c);
                    i++;
                }
                i++;
                try
                {
                    DateFormat df = new SimpleDateFormat(dfs.toString());
                    ret.append(df.format(d));
                }
                catch (IllegalArgumentException ex)
                {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Illegal Argument", JOptionPane.ERROR_MESSAGE);
                }
            }
            else if (c == '%')
            {
                command = true;
            }
            else if (c == '\\')
            {
                escape = true;
            }
            else
            {
                ret.append(c);
            }
        }
        return ret.toString();
    }

    void download(List<Pair<Manga, String>> l)
    {
        jl_dling.setText("Downloading: Wait!");

        //File f = new File(currentdir, parseFormat(manga, chapter));
        //if(!f.exists()) f.mkdirs();

        for (Pair<Manga, String> pair : l)
        {
            pair.first.setChapter(pair.second);
        }
        save();

        dl = new Downloader(this, l, currentdir);
        Thread t = new Thread(dl);
        t.start();
    }

    public static String getVersion()
    {
        return VERSION;
    }

    private Manga findManga(Set<Manga> mangalist, Manga m)
    {
        for (Manga manga : mangalist)
        {
            if (manga.equals(m))
            {
                return manga;
            }
        }
        return null;
    }

    void setDLALLEnabled(boolean b)
    {
        jb_dlall.setEnabled(b);
    }

    public void showError(String s)
    {
        JOptionPane.showMessageDialog(this, s, "An Error occurred.", JOptionPane.ERROR_MESSAGE);
    }
}
